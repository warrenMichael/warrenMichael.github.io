{"version":3,"sources":["components/Header.js","components/ClearAllItems.js","components/TodoItem.js","components/ViewOptions.js","components/AddTodoItem.js","helpers/generate-unique-id.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","_ref$className","className","headerText","react_default","a","createElement","concat","ClearAllItems","clearAll","onClick","TodoItem","handleCompletedCheckbox","id","isCompleted","removeItem","text","checked","name","onChange","bind","type","ViewOptions","handleViewOptions","AddTodoItem","_ref$labelText","labelText","onSubmitHandler","onSubmit","value","GenerateUniqueId","replace","c","r","Math","random","toString","TodoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","itemView","todoItems","addItem","assertThisInitialized","event","preventDefault","newTodo","target","querySelector","newTododArr","setState","localStorage","setItem","JSON","stringify","parse","getItem","itemId","newTodoList","map","item","filter","_this2","components_ViewOptions","components_ClearAllItems","length","components_TodoItem","key","components_AddTodoItem","React","Component","App","components_Header","role","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07604553.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../css/components/header.css\";\n\n/**\n * PaywallRiser component\n *\n * @param {Object} props - React props\n * @param {string} [props.className] - optional class name\n * @param {string} props.headerText = - text to use for h1\n *\n * @returns {ReactElement} <aside>\n */\nconst Header = ({ className = \"\", headerText }) => {\n  return (\n    <header className={`todo-header ${className}`}>\n      <h1 className=\"hdr\">{headerText}</h1>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string,\n  headerText: PropTypes.string.isRequired\n};\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../css/components/clear-all-items.css\";\n\n/**\n * PaywallRiser component\n *\n * @param {Object} props - React props\n * @param {string} [props.className] - optional class name\n * @param {function} props.clearAll - function that executes on click of list item\n *\n * @returns {ReactElement} <aside>\n */\nconst ClearAllItems = ({ className = \"\", clearAll }) => {\n  return (\n    <div className={`clear-all-btn-wrapper ${className}`}>\n      <button className=\"clear-all-btn\" onClick={clearAll}>\n        Clear all items\n      </button>\n    </div>\n  );\n};\n\nClearAllItems.propTypes = {\n  className: PropTypes.string,\n  clearAll: PropTypes.func.isRequired\n};\n\nexport default ClearAllItems;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../css/components/todo-item.css\";\n\n/**\n * PaywallRiser component\n *\n * @param {Object} props - React props\n * @param {string} [props.className] - optional class name\n * @param {function} props.handleCompletedCheckbox - execute on change on checkbox input\n * @param {string} props.id - unique id for todo item\n * @param {boolean} [props.isCompleted] - if todo item is completed\n * @param {function} [props.removeItem] - execute on clicking remove button\n * @param {string} props.text - text for todo item\n *\n * @returns {ReactElement} <aside>\n */\nconst TodoItem = ({\n  className = \"\",\n  handleCompletedCheckbox,\n  id,\n  isCompleted,\n  removeItem,\n  text\n}) => {\n  return (\n    <div\n      className={`todo-list-item ${className} ${\n        isCompleted ? \"completed\" : \"\"\n      }`}\n    >\n      <div className=\"todo-item-text\">{text}</div>\n      <div className=\"todo-options\">\n        <form>\n          <label>\n            <input\n              className=\"completed-checkbox-input\"\n              checked={isCompleted}\n              name=\"completed\"\n              onChange={handleCompletedCheckbox.bind(this, id)}\n              type=\"checkbox\"\n            />\n            <span className=\"completed-input-label\">Completed</span>\n          </label>\n        </form>\n        {removeItem && (\n          <button className=\"btn-remove\" onClick={removeItem.bind(this, id)}>\n            Ã— Remove this Item\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nTodoItem.propTypes = {\n  className: PropTypes.string,\n  handleCompletedCheckbox: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  isCompleted: PropTypes.bool,\n  removeItem: PropTypes.func,\n  text: PropTypes.string.isRequired\n};\n\nexport default TodoItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../css/components/view-options.css\";\n\n/**\n * PaywallRiser component\n *\n * @param {Object} props - React props\n * @param {string} [props.className] - optional class name\n * @param {boolean} props.handleViewOptions - function that executes on click of list item\n *\n * @returns {ReactElement} <aside>\n */\nconst ViewOptions = ({ className = \"\", handleViewOptions }) => {\n  return (\n    <div className={`view-options ${className}`}>\n      <button\n        className=\"view-option-item all\"\n        onClick={handleViewOptions.bind(this, \"\")}\n      >\n        All\n      </button>\n      <button\n        className=\"view-option-item uncompleted\"\n        onClick={handleViewOptions.bind(this, \"uncompleted\")}\n      >\n        Uncompleted\n      </button>\n      <button\n        className=\"view-option-item completed\"\n        onClick={handleViewOptions.bind(this, \"completed\")}\n      >\n        Completed\n      </button>\n    </div>\n  );\n};\n\nViewOptions.propTypes = {\n  className: PropTypes.string,\n  handleViewOptions: PropTypes.func.isRequired\n};\n\nexport default ViewOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../css/components/add-todo-item.css\";\n\n/**\n * PaywallRiser component\n *\n * @param {Object} props - React props\n * @param {string} [props.className] - optional class name\n * @param {string} props.labelText - label text for add item input, uses default if not set\n * @param {function} props.onSubmitHandler - function executes on submit\n *\n * @returns {ReactElement} <aside>\n */\nconst AddTodoItem = ({\n  className = \"\",\n  labelText = \"Add TODO item\",\n  onSubmitHandler\n}) => {\n  return (\n    <form\n      className={`add-item-container ${className}`}\n      onSubmit={onSubmitHandler}\n    >\n      <label>\n        <span className=\"add-item-label\">{labelText}</span>\n        <input className=\"add-item-text-input\" type=\"text\" name=\"new-todo\" />\n      </label>\n      <input className=\"add-item-submit\" type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n};\n\nAddTodoItem.propTypes = {\n  className: PropTypes.string,\n  labelText: PropTypes.string,\n  onSubmitHandler: PropTypes.func.isRequired\n};\n\nexport default AddTodoItem;\n","const GenerateUniqueId = () => {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n    var r = (Math.random() * 16) | 0,\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nexport default GenerateUniqueId;\n","import React from \"react\";\n\nimport ClearAllItems from \"./ClearAllItems\";\nimport TodoItem from \"./TodoItem\";\nimport ViewOptions from \"./ViewOptions\";\nimport AddTodoItem from \"./AddTodoItem\";\n\nimport GenerateUniqueId from \"../helpers/generate-unique-id\";\n\nimport \"../css/components/todo-list.css\";\n\n/**\n * PaywallRiser component\n *\n * @param {Object} props - React props\n * @param {string} [props.className] - optional class name\n *\n * @returns {ReactElement} <aside>\n */\nclass TodoList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      itemView: \"\",\n      todoItems: []\n    };\n    this.addItem = this.addItem.bind(this);\n    this.clearAll = this.clearAll.bind(this);\n    this.handleCompletedCheckbox = this.handleCompletedCheckbox.bind(this);\n    this.handleViewOptions = this.handleViewOptions.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n  }\n\n  addItem(event) {\n    event.preventDefault();\n    const newTodo = {\n      id: GenerateUniqueId(),\n      isCompleted: false,\n      text: event.target.querySelector('[name=\"new-todo\"]').value\n    };\n    const newTododArr = this.state.todoItems.concat([newTodo]);\n    this.setState({\n      todoItems: newTododArr\n    });\n    localStorage.setItem(\"todoItems\", JSON.stringify(newTododArr));\n  }\n\n  componentDidMount() {\n    const todoItems = JSON.parse(localStorage.getItem(\"todoItems\"));\n    this.setState({\n      todoItems\n    });\n  }\n\n  clearAll() {\n    this.setState({\n      todoItems: []\n    });\n    localStorage.setItem(\"todoItems\", JSON.stringify([]));\n  }\n\n  handleCompletedCheckbox(itemId) {\n    const newTodoList = this.state.todoItems.map(item => {\n      if (itemId === item.id) {\n        item.isCompleted = !item.isCompleted;\n      }\n      return item;\n    });\n    this.setState({\n      todoItems: newTodoList\n    });\n    localStorage.setItem(\"todoItems\", JSON.stringify(newTodoList));\n  }\n\n  handleViewOptions(itemView) {\n    this.setState({\n      itemView\n    });\n  }\n\n  removeItem(itemId) {\n    const newTodoList = this.state.todoItems.filter(item => {\n      return item.id !== itemId;\n    });\n    this.setState({\n      todoItems: newTodoList\n    });\n    localStorage.setItem(\"todoItems\", JSON.stringify(newTodoList));\n  }\n\n  render() {\n    const { todoItems } = this.state;\n    return (\n      <div className={`todo-list ${this.state.itemView}`}>\n        <ViewOptions\n          className={this.state.itemView}\n          handleViewOptions={this.handleViewOptions}\n        />\n        <ClearAllItems clearAll={this.clearAll} />\n        {!this.state.todoItems.length && (\n          <p className=\"no-tasks-text\">\n            Currently you have no todo tasks. Add some more or take a breather.\n          </p>\n        )}\n        {todoItems.map(item => {\n          return (\n            <TodoItem\n              handleCompletedCheckbox={this.handleCompletedCheckbox}\n              id={item.id}\n              isCompleted={item.isCompleted}\n              key={`${item.id}`}\n              removeItem={this.removeItem}\n              text={item.text}\n            />\n          );\n        })}\n        <AddTodoItem onSubmitHandler={this.addItem} />\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from \"react\";\nimport \"./css/app.css\";\n\nimport Header from \"./components/Header.js\";\nimport TodoList from \"./components/TodoList.js\";\n\nconst App = () => {\n  return (\n    <div className=\"todo-list-application\">\n      <Header headerText=\"My TODO List\" />\n      <main role=\"main\">\n        <TodoList />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/*eslint no-console: \"off\"*/\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}